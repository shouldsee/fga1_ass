"0","calc_mad <- function(vct){"
"0","median(abs(vct - median(vct) ))"
"0","}"
"0","seg_thres <- function(signal, MIN_LEN=5, Z_MIN=4, seg = 1, SUPER_THRES  = -0.5 , DEBUG = F){  "
"0","  if (length(signal) < 20){"
"0","    sprintf(""[WARNING] Not enough observation (N = %d < 20) to perform clustering reiliably"", length(signal))%f%warning"
"0","  }"
"0","  vct = sort(signal)"
"0","  # start = 0"
"0","  # vcti = vct[-(1:start)]"
"0","  vcti = vct"
"0","  x = c()"
"0","  "
"0","  if (DEBUG){"
"0","    xs = c()"
"0","    ys = c()"
"0","    zs = c()"
"0","  }"
"0","  outdf = data.frame("
"0","    avg = NULL,"
"0","    stdev=NULL,"
"0","    N = NULL,"
"0","    t.pval=NULL,"
"0","    include = NULL"
"0","  )"
"0","# superthres = -0.5"
"0","thres_curr = NA"
"0","  for (ii in  1:length(vcti)){"
"0","    i  = vcti[ii]"
"0","    if (length(x) >= MIN_LEN){"
"0","      "
"0","      mad = calc_mad(x)"
"0","      z = (i-mean(x)) / mad"
"0","      p = pnorm(z)"
"0","      if (!is.na(z) & seg){"
"0","        if (z > Z_MIN | ii == length(vcti)){"
"0","          # ?t.test"
"0","          # pval = "
"0","          mx = mean(x)"
"0","          ##### Simple thresholding the average "
"0","          # include = (mx < superthres)"
"0","          ##### A modified one-tail t-test using MAD as an estimator for sample standard deviation."
"0","          ##### This makes p-value more robust w.r.t outlier."
"0","          pval = pt( (mx - SUPER_THRES)/ (mad/sqrt(length(x))),df = length(x) -1, lower = T)"
"0","          include = pval < 1E-3"
"0","          "
"0","          "
"0","          ##### By default, R uses sd() to estimate sample stdev."
"0","          # stat = t.test(x, mu = superthres, alternative = 'smaller')"
"0","          # pval = stat$p.value"
"0","          # paste0(round(mean(x),5),' ',round(mad,5),' ',length(x))%f%print"
"0","          # print(pval) "
"0","          # include = "
"0","          outdf = rbind(outdf,list(avg = mean(x) "
"0","                                   ,stdev = mad"
"0","                                   ,N = length(x)"
"0","                                   ,include = include))"
"0","          if (include){"
"0","            thres_curr = max(thres_curr, x, na.rm=T)"
"0","          }"
"0","          #### Reset the sample vector ""x"""
"0","          x = c()"
"0","        }"
"0","      }"
"0","    }else{"
"0","      z = 0"
"0","    }"
"0","    x  = c(x,i)"
"0","    if (DEBUG){"
"0","      ys = c(ys,z)"
"0","      xs = c(xs,i)"
"0","      zs = c(zs,mad)"
"0","    }"
"0","    # zs = c(zs,sd(x))"
"0","    # print(p)"
"0","  }"
"0","  # if (sum(outdf$include)==0){"
"0","  #   thres_curr = NA"
"0","  # }"
"0","  if (!DEBUG){"
"0","  return(thres_curr)"
"0","  }else{"
"0","  print(outdf)"
"0","  print(thres_curr)"
"0","  try({"
"0","    plot(xs, ylab = 'logR',xlab = 'Segment Index', ylim = c(-1.5,1.5)"
"0","         , main = tail( df$data %f% names,1))"
"0","    abline(h = -0.5, col= 2,lty = 2)"
"0","    abline(h = thres_curr, col= 3,lty = 2)"
"0","    par(new = T)"
"0","    # plot(ys,axes = F)"
"0","    grid()"
"0","    # par(new = T)"
"0","    # # zs = exp(zs)"
"0","    # plot(zs, ylab = '',axes = F,type = 'l')"
"0","  })"
"0","  return(list(thres_curr,outdf))"
"0","  "
"0","}"
"0","}"
