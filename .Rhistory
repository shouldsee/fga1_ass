plot( noisy(log_convert(cpnum),sigma = 0.1))
noisy <- function(vct, sigma = .5){
vct + rnorm(vct, mean = 0, sd = abs(vct) * sigma)
}
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum),sigma = 0.1))
sigma =  abs(vct) * sigma
system.time({
segEND = assign_copynumber(probes,p_vct,L_vct)
})
noisy <- function(vct, sigma = .5, relative = F){
if relative{
system.time({
segEND = assign_copynumber(probes,p_vct,L_vct)
})
noisy <- function(vct, sigma = .5, relative = F){
if (relative){
sigma =  abs(vct) * sigma
}
vct + rnorm(vct, mean = 0, sd =sigma)
}
cpnum = segEND
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum),sigma = 0.1))
# + 0
?rnorm
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum),sigma = 0.05))
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum[1:E5]),sigma = 0.05))
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum[1:1E5]),sigma = 0.05))
noisy(log_convert(cpnum[1:1E5]),sigma = 0.05)
length(noisy(log_convert(cpnum[1:1E5]),sigma = 0.05))
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum[1:1E4]),sigma = 0.05))
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum[1:1E3]),sigma = 0.05))
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum[1:1E4]),sigma = 0.05))
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum[1:1E3]),sigma = 0.05))
L_norm = 25E4
'%f%' <- function(x,f) { do.call(what = f,
args = list(x)) }
###### Define proportion of loss/duplication
p_loss = 0.25
p_norm = 0.5
p_dup  = 0.25
p_vct = c(p_loss,p_norm,p_dup)
stopifnot(p_loss + p_norm + p_dup  == 1)
##### Define average length of each state.
L_loss = 50E3
L_norm = 25E4
L_dup  = 50E3
L_vct = c(L_loss, L_norm, L_dup)
#### Initialise probe grid on chromosome
L_chromosome = 200E6  ### 200 Megabp genome
probes = seq(1,L_chromosome, length.out = 30E3) ### 30 Kbp probes ,aka one probe per 6Kbp
# length(probes)
# ?seq
probes <- probes %f% as.integer
probes[1:5]
system.time({
segEND = assign_copynumber(probes,p_vct,L_vct)
})
# seg_count
# probe_count
# probe_count
sample_segment <- function(N, p_vct, L_vct, s_vct){
seg_states = sample( s_vct, N ,replace = T,prob = p_vct)
# rpois( 1:(seg_states%f%length),L_vct[seg_states])
segL_vct = rpois( 1 : (seg_states%f%length), L_vct[seg_states])
}
assign_copynumber <- function(probidx, p_vct, L_vct, L_chromosome = tail(probidx,1), maxIter = 5){
L_avg = p_vct %*% L_vct
seg_count = (L_chromosome / L_avg)
seg_states = c()
segEND = c(0)
# segEND_lst = vector(maxIter,'list')
for (i in 1:maxIter){
# sample_segment( N = seg_count * 1.5 %f% floor, p_vct, L_vct, s_vct = c(1,2,3) )
N = seg_count * 1.5 %f% floor
s_vct =  c(1,2,3)
seg_states_new = sample( s_vct, N ,replace = T,prob = p_vct)
seg_states = c(seg_states, seg_states_new)
segL_vct =  rpois( 1 : (seg_states%f%length), L_vct[seg_states])
# segL_vct = sample(c(1,2,3), N ,replace = T,prob = p_vct)
segEND_new = tail(segEND,1) + cumsum(segL_vct)
segEND = c(segEND,segEND_new)
allEND = tail(segEND,1)
if  ( L_chromosome  - allEND < 0 ){
### Length achieved
break
}else{
if (i==maxIter){
#### This should be rare
stop("[ERROR]: Failed to generate a chromosom of wanted length, try increase 'maxIter' ")
}else{
###  update estimated chromosome
seg_count = (L_chromosome - allEND) / L_avg
}
}
}
# segEND[-1]
# segEND
find_seg <- function(probe){
which((probe <= segEND[-1]) & (probe >= segEND[-length(segEND)]))
}
cpnum = seg_states[lapply(probes, FUN = find_seg)]
}
log_convert <- function(vct){
log2(vct/2)
}
noisy <- function(vct, sigma = .5, relative = F){
if (relative){
sigma =  abs(vct) * sigma
}
vct + rnorm(vct, mean = 0, sd =sigma)
}
system.time({
segEND = assign_copynumber(probes,p_vct,L_vct)
})
# seg_count
# probe_count
# probe_count
sample_segment <- function(N, p_vct, L_vct, s_vct){
seg_states = sample( s_vct, N ,replace = T,prob = p_vct)
# rpois( 1:(seg_states%f%length),L_vct[seg_states])
segL_vct = rpois( 1 : (seg_states%f%length), L_vct[seg_states])
}
assign_copynumber <- function(probidx, p_vct, L_vct, L_chromosome = tail(probidx,1), maxIter = 5){
L_avg = p_vct %*% L_vct
seg_count = (L_chromosome / L_avg)
seg_states = c()
segEND = c(0)
# segEND_lst = vector(maxIter,'list')
for (i in 1:maxIter){
# sample_segment( N = seg_count * 1.5 %f% floor, p_vct, L_vct, s_vct = c(1,2,3) )
N = seg_count * 1.5 %f% floor
s_vct =  c(1,2,3)
seg_states_new = sample( s_vct, N ,replace = T,prob = p_vct)
seg_states = c(seg_states, seg_states_new)
segL_vct =  rpois( 1 : (seg_states%f%length), L_vct[seg_states])
# segL_vct = sample(c(1,2,3), N ,replace = T,prob = p_vct)
segEND_new = tail(segEND,1) + cumsum(segL_vct)
segEND = c(segEND,segEND_new)
allEND = tail(segEND,1)
if  ( L_chromosome  - allEND < 0 ){
### Length achieved
break
}else{
if (i==maxIter){
#### This should be rare
stop("[ERROR]: Failed to generate a chromosom of wanted length, try increase 'maxIter' ")
}else{
###  update estimated chromosome
seg_count = (L_chromosome - allEND) / L_avg
}
}
}
# segEND[-1]
# segEND
find_seg <- function(probe){
which((probe <= segEND[-1]) & (probe >= segEND[-length(segEND)]))
}
cpnum = seg_states[lapply(probes, FUN = find_seg)%f%as.vector]
}
log_convert <- function(vct){
log2(vct/2)
}
noisy <- function(vct, sigma = .5, relative = F){
if (relative){
sigma =  abs(vct) * sigma
}
vct + rnorm(vct, mean = 0, sd =sigma)
}
segEND = assign_copynumber(probes,p_vct,L_vct)
probes
probes%f%is
cpnum = segEND
segEND = assign_copynumber(probes,p_vct,L_vct)
# seg_count
# probe_count
# probe_count
sample_segment <- function(N, p_vct, L_vct, s_vct){
seg_states = sample( s_vct, N ,replace = T,prob = p_vct)
# rpois( 1:(seg_states%f%length),L_vct[seg_states])
segL_vct = rpois( 1 : (seg_states%f%length), L_vct[seg_states])
}
assign_copynumber <- function(probidx, p_vct, L_vct, L_chromosome = tail(probidx,1), maxIter = 5){
L_avg = p_vct %*% L_vct
seg_count = (L_chromosome / L_avg)
seg_states = c()
segEND = c(0)
# segEND_lst = vector(maxIter,'list')
for (i in 1:maxIter){
# sample_segment( N = seg_count * 1.5 %f% floor, p_vct, L_vct, s_vct = c(1,2,3) )
N = seg_count * 1.5 %f% floor
s_vct =  c(1,2,3)
seg_states_new = sample( s_vct, N ,replace = T,prob = p_vct)
seg_states = c(seg_states, seg_states_new)
segL_vct =  rpois( 1 : (seg_states%f%length), L_vct[seg_states])
# segL_vct = sample(c(1,2,3), N ,replace = T,prob = p_vct)
segEND_new = tail(segEND,1) + cumsum(segL_vct)
segEND = c(segEND,segEND_new)
allEND = tail(segEND,1)
if  ( L_chromosome  - allEND < 0 ){
### Length achieved
break
}else{
if (i==maxIter){
#### This should be rare
stop("[ERROR]: Failed to generate a chromosom of wanted length, try increase 'maxIter' ")
}else{
###  update estimated chromosome
seg_count = (L_chromosome - allEND) / L_avg
}
}
}
# segEND[-1]
# segEND
find_seg <- function(probe){
which((probe <= segEND[-1]) & (probe >= segEND[-length(segEND)]))
}
probe_states=lapply(probes, FUN = find_seg)%f%as.vector
cpnum = seg_states[probe_states]
}
log_convert <- function(vct){
log2(vct/2)
}
noisy <- function(vct, sigma = .5, relative = F){
if (relative){
sigma =  abs(vct) * sigma
}
vct + rnorm(vct, mean = 0, sd =sigma)
}
probes%f%is
system.time({
segEND = assign_copynumber(probes,p_vct,L_vct)
})
# seg_count
# probe_count
# probe_count
sample_segment <- function(N, p_vct, L_vct, s_vct){
seg_states = sample( s_vct, N ,replace = T,prob = p_vct)
# rpois( 1:(seg_states%f%length),L_vct[seg_states])
segL_vct = rpois( 1 : (seg_states%f%length), L_vct[seg_states])
}
assign_copynumber <- function(probidx, p_vct, L_vct, L_chromosome = tail(probidx,1), maxIter = 5){
L_avg = p_vct %*% L_vct
seg_count = (L_chromosome / L_avg)
seg_states = c()
segEND = c(0)
# segEND_lst = vector(maxIter,'list')
for (i in 1:maxIter){
# sample_segment( N = seg_count * 1.5 %f% floor, p_vct, L_vct, s_vct = c(1,2,3) )
N = seg_count * 1.5 %f% floor
s_vct =  c(1,2,3)
seg_states_new = sample( s_vct, N ,replace = T,prob = p_vct)
seg_states = c(seg_states, seg_states_new)
segL_vct =  rpois( 1 : (seg_states%f%length), L_vct[seg_states])
# segL_vct = sample(c(1,2,3), N ,replace = T,prob = p_vct)
segEND_new = tail(segEND,1) + cumsum(segL_vct)
segEND = c(segEND,segEND_new)
allEND = tail(segEND,1)
if  ( L_chromosome  - allEND < 0 ){
### Length achieved
break
}else{
if (i==maxIter){
#### This should be rare
stop("[ERROR]: Failed to generate a chromosom of wanted length, try increase 'maxIter' ")
}else{
###  update estimated chromosome
seg_count = (L_chromosome - allEND) / L_avg
}
}
}
# segEND[-1]
# segEND
find_seg <- function(probe){
which((probe <= segEND[-1]) & (probe > segEND[-length(segEND)]))
}
probe_states=lapply(probes, FUN = find_seg)%f%as.vector
cpnum = seg_states[probe_states]
}
log_convert <- function(vct){
log2(vct/2)
}
noisy <- function(vct, sigma = .5, relative = F){
if (relative){
sigma =  abs(vct) * sigma
}
vct + rnorm(vct, mean = 0, sd =sigma)
}
# %f%as.vector
cpnum = seg_states[probe_states]
# seg_count
# probe_count
# probe_count
sample_segment <- function(N, p_vct, L_vct, s_vct){
seg_states = sample( s_vct, N ,replace = T,prob = p_vct)
# rpois( 1:(seg_states%f%length),L_vct[seg_states])
segL_vct = rpois( 1 : (seg_states%f%length), L_vct[seg_states])
}
assign_copynumber <- function(probidx, p_vct, L_vct, L_chromosome = tail(probidx,1), maxIter = 5){
L_avg = p_vct %*% L_vct
seg_count = (L_chromosome / L_avg)
seg_states = c()
segEND = c(0)
# segEND_lst = vector(maxIter,'list')
for (i in 1:maxIter){
# sample_segment( N = seg_count * 1.5 %f% floor, p_vct, L_vct, s_vct = c(1,2,3) )
N = seg_count * 1.5 %f% floor
s_vct =  c(1,2,3)
seg_states_new = sample( s_vct, N ,replace = T,prob = p_vct)
seg_states = c(seg_states, seg_states_new)
segL_vct =  rpois( 1 : (seg_states%f%length), L_vct[seg_states])
# segL_vct = sample(c(1,2,3), N ,replace = T,prob = p_vct)
segEND_new = tail(segEND,1) + cumsum(segL_vct)
segEND = c(segEND,segEND_new)
allEND = tail(segEND,1)
if  ( L_chromosome  - allEND < 0 ){
### Length achieved
break
}else{
if (i==maxIter){
#### This should be rare
stop("[ERROR]: Failed to generate a chromosom of wanted length, try increase 'maxIter' ")
}else{
###  update estimated chromosome
seg_count = (L_chromosome - allEND) / L_avg
}
}
}
# segEND[-1]
# segEND
find_seg <- function(probe){
which((probe <= segEND[-1]) & (probe > segEND[-length(segEND)]))
}
probe_states=lapply(probes, FUN = find_seg)
# %f%as.vector
cpnum = seg_states[probe_states]}
log_convert <- function(vct){
log2(vct/2)
}
noisy <- function(vct, sigma = .5, relative = F){
if (relative){
sigma =  abs(vct) * sigma
}
vct + rnorm(vct, mean = 0, sd =sigma)
}
probes%f%is
system.time({
segEND = assign_copynumber(probes,p_vct,L_vct)
})
# seg_count
# probe_count
# probe_count
sample_segment <- function(N, p_vct, L_vct, s_vct){
seg_states = sample( s_vct, N ,replace = T,prob = p_vct)
# rpois( 1:(seg_states%f%length),L_vct[seg_states])
segL_vct = rpois( 1 : (seg_states%f%length), L_vct[seg_states])
}
assign_copynumber <- function(probidx, p_vct, L_vct, L_chromosome = tail(probidx,1), maxIter = 5){
L_avg = p_vct %*% L_vct
seg_count = (L_chromosome / L_avg)
seg_states = c()
segEND = c(0)
# segEND_lst = vector(maxIter,'list')
for (i in 1:maxIter){
# sample_segment( N = seg_count * 1.5 %f% floor, p_vct, L_vct, s_vct = c(1,2,3) )
N = seg_count * 1.5 %f% floor
s_vct =  c(1,2,3)
seg_states_new = sample( s_vct, N ,replace = T,prob = p_vct)
seg_states = c(seg_states, seg_states_new)
segL_vct =  rpois( 1 : (seg_states%f%length), L_vct[seg_states])
# segL_vct = sample(c(1,2,3), N ,replace = T,prob = p_vct)
segEND_new = tail(segEND,1) + cumsum(segL_vct)
segEND = c(segEND,segEND_new)
allEND = tail(segEND,1)
if  ( L_chromosome  - allEND < 0 ){
### Length achieved
break
}else{
if (i==maxIter){
#### This should be rare
stop("[ERROR]: Failed to generate a chromosom of wanted length, try increase 'maxIter' ")
}else{
###  update estimated chromosome
seg_count = (L_chromosome - allEND) / L_avg
}
}
}
# segEND[-1]
# segEND
find_seg <- function(probe){
which((probe <= segEND[-1]) & (probe > segEND[-length(segEND)]))
}
probe_states=sapply(probes, FUN = find_seg)
# %f%as.vector
cpnum = seg_states[probe_states]}
log_convert <- function(vct){
log2(vct/2)
}
noisy <- function(vct, sigma = .5, relative = F){
if (relative){
sigma =  abs(vct) * sigma
}
vct + rnorm(vct, mean = 0, sd =sigma)
}
probes%f%is
system.time({
segEND = assign_copynumber(probes,p_vct,L_vct)
})
cpnum = segEND
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
plot( noisy(log_convert(cpnum[1:1E3]),sigma = 0.05))
# length(noisy(log_convert(cpnum[1:1E5]),sigma = 0.05))
# + 0
# ?rnorm
probes%f%is
system.time({
segEND = assign_copynumber(probes,p_vct,L_vct)
})
cpnum = segEND
data = noisy(log_convert(cpnum), sigma = 0.05)
# plot( noisy(log_convert(cpnum)[1:1E5] ,sigma = 0.01))
# plot( noisy(log_convert(cpnum[1:1E3]),sigma = 0.05))
# length(noisy(log_convert(cpnum[1:1E5]),sigma = 0.05))
# + 0
# ?rnorm
'%f%' <- function(x,f) { do.call(what = f,
args = list(x)) }
###### Define proportion of loss/duplication
p_loss = 0.25
p_norm = 0.5
p_dup  = 0.25
p_vct = c(p_loss,p_norm,p_dup)
stopifnot(p_loss + p_norm + p_dup  == 1)
##### Define average length of each state.
L_loss = 50E3
L_norm = 25E4
L_dup  = 50E3
L_vct = c(L_loss, L_norm, L_dup)
#### Initialise probe grid on chromosome
L_chromosome = 200E6  ### 200 Megabp genome
probes = seq(1,L_chromosome, length.out = 30E3) ### 30 Kbp probes ,aka one probe per 6Kbp
# length(probes)
# ?seq
probes <- probes %f% as.integer
probes[1:5]
##### Assign copynumber to probes
system.time({
segEND = assign_copynumber(probes,p_vct,L_vct)
})
cpnum = segEND
data = noisy(log_convert(cpnum), sigma = 0.05)
source('/local/data/public/fg368/genome_informatics/util_copynumber.R')
knitr::opts_chunk$set(echo = TRUE)
regexpr('Q__(^\.)',test)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regexpr('Q__(^.)',test)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regexpr('Q__(^\\.)',test)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regexpr('Q__',test)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regexpr('Q__(^\\.)+',test)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regexpr('Q__(.^\\.)+',test)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regexpr('Q__(.^\\.)',test)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regexpr('Q__[^\\.]+',test)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regexpr('T__[^\\.]+',test)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regmatches(test,regexpr('T__[^\\.]+',test))
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regmatches(test,regexpr('T__([^\\.])+',test))
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
# regmatches(test,regexpr('T__([^\\.])+',test))
regmatches(test,regexec('T__([^\\.])+',test))
gsub( test, 'T__([^\\.])+', '\\1' )
gsub(  'T__([^\\.])+', '\\1', test )
gsub(  'T__([^\\.])+', '\\1', test )
gsub(  '.*T__([^\\.])+.*', '\\1', test )
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
regmatches(test,regexpr('T__([^\\.])+',test))
gsub(  '.*T__([^\\.])+\\..*', '\\1', test )
# regmatches(test,regexec('T__([^\\.])+',test))
gsub(  '.*T__([^\\.])+\\..*', '\\1', test )
gsub(  '.*T__([.^\\.])+\\..*', '\\1', test )
gsub(  '.*T__([^\\.])*\\..*', '\\1', test )
gsub(  '.*T__([^\\.])+\\..', '\\1', test )
regmatches(test,regexpr('T__([^\\.])+',test))
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
interm = regmatches(test,regexpr('T__([^\\.])+',test))
res = gsub('T__','',interm)
print(res)
test = 'Q__Drosophilamelanogaster.mRNA.fa.T__Drosophila_yakuba.dyak_caf1.dna_sm.toplevel.fa.m8.log'
interm = regmatches(test,regexpr('T__([^\\.])+',test))
res = gsub('T__','',interm)
print(res)
# gsub(  '.*T__([^\\.])+\\..', '\\1', test )
# regmatches(test,regexec('T__([^\\.])+',test))
?print
?cat
cat(c(1,2,3))
cat(paste(1,2,3,sep='\n'))
